### Input: a startmat A

### Output: the small dimension matrix by using the diagonal part

### n > p

reduce_dim_startmat := proc(A, bF)
		    local FD, k, LDD;

		    local nr, nc, n, m;

		    nr := RowDimension(A);

		    nc := ColumnDimension(A);

		    n := nc - nr + 1;

		    m := min(nr, n);
		    
		    FD := factor_diag(A);

		    LDD := [];
		    for k from 2 to m do:
		    	LDD := [op(LDD), reduce_form(A, m, FD, bF, k)];
		    end do; 

		    return LDD;
end proc;


### Input: a matrix A, positive integers m, k with 1 <  k <= m; FD: list linear factor diagonal of A

### Output: the reduce submatrices of dim k*(q-p) from the diagonal 


reduce_form := proc(A, m, FD, bF, k)
	    local Lp, Lk, RF, Lv, ME, Ls, As;

	    local i; 

	    local nr;

	    nr := RowDimension(A);
	   
	    
	    Lp := [seq(i, i = 1..nr)];

	    Lk := choose(Lp, k);
	    
	    RF := [];
	    for i from 1 to nops(Lk) do:
	    	RF := [op(RF), match_equas(A, FD, Lk[i], bF)[2]];		
	    end do;

	    return Lk, RF; 
end proc;




### Input: a matrix A, a list FD contains the list of the factors of A[i, i], a list L - subset of [1, ..., min(p, n)], a prime number bF

### Ouput: the list contains all submatrix of A by rewrite the variables from k = nops(L) linear form

match_equas := proc(A, FD,  L, bF)
	    local Le, i, CD, RV, SA, RSA;

	    local nr, nc;

	    nr := RowDimension(A);

	    nc := ColumnDimension(A);
	    
	    Le := [];
	    for i from 1 to nops(L) do:
	    	Le := [op(Le), FD[L[i]]]; 
	    end do; 
	    
	    
	    CD := CartProdDeiterated(Le);
	    
	    RV := [];
	    for i from 1 to nops(CD) do:
	    	RV := [op(RV), reduce_var_list(CD[i], bF)];
	    end do;
	    
	    SA := SubMatrix(A, L, [nr+1..nc]);
	     
	    RSA := [];
	    for i from 1 to nops(RV) do:
	    	RSA := [op(RSA), sub_rule(RV[i], SA, bF)];
	    end do;
	    
	    return RV, RSA;
end proc; 


### Input: a rule R; a matrix B

### Output: apply the rule R in the matrix B


sub_rule := proc(R, B, bF)
	 local i, j, nr, nc;

	 local BS;

	 nr := RowDimension(B);
	 
	 nc := ColumnDimension(B);

	 BS := Matrix(nr, nc); 
	 for i from 1 to nr do:
	     for j from 1 to nc do:
	     	 BS[i, j] := applyrule(R, B[i, j]) mod bF; 
	     end do; 
	 end do;

	 return BS; 
end proc; 

### Input: a list L of the lists, each list in L contains linear form;

### Ouput: the list LL contains the lists with each elemets of a list in LL contains one element in the list of L

### E.G : L = [[1, 2], [a, b]] --> LL = [[1, a], [1, b], [2, a], [2, b]]


CartProdDeiterated := proc(L)
		   local C,i,S;
    		   C := combinat['cartprod'](L);
    		   [seq(C['nextvalue'](), i=1..mul(nops(S), S= L))]
end proc;





### Input: a poly matrix A

### Output: a list of contains all factors of all elements in the diagonal


factor_diag := proc(A)
	    local nr, nc, L, i;

	    nr := RowDimension(A);
	    
	    #nc := ColumnDimension(A);
	    
	    L := [];
	    for i from 1 to nr do:
	    	if degree(A[i, i]) = 1 then
		   L := [op(L), [A[i, i]]];
		else
			L := [op(L), remove(t -> degree(t) =0, [op(factor(A[i, i]))])];
		end if; 
	    end do;

	    return L;
	    
end proc;






reduce_var_list := proc(LL, bF)
		local L, i, n, Lv;
		
		local Mat, RN, RM, nr, MB;

		local SM, V, C, DD, Lr, nc;

		Lv := [op(indets(LL))];
		
		n := nops(Lv);
			
		L := [];
		for i from 1 to nops(LL) do:
		      L := [op(L),reduce_vars(LL[i], Lv)];
		end do;
		 
		Mat := Matrix(L);

		RN := ReducedRowEchelonForm(Mat);
		
		nr := RowDimension(RN);
		
		nc := ColumnDimension(RN);
		
		RM := -(RN mod bF);
		 
		SM := SubMatrix(RM, [1..nr], [nr+1..nc-1]);
				
		V := Matrix(n - nr, 1);
		
		for i from 1 to (n - nr) do:
		    V[i, 1] := Lv[i+nr]; 
		end do;
		
		MB :=  Multiply(SM, V); 
		
		C := -SubMatrix(RM, [1..nr], [nc]);

		DD := MB+C;
		
		Lr := [];
		for i from 1 to nr do:
		    Lr := [op(Lr), Lv[i] = DD[i, 1]];
		end do;
		
		return Lr;



end proc;



### Input: a liner poly L in Lv = [x1, ..., xn] variables

### Ouput: a list for rewriting all x1, ..., x_d in the polys of x_{d+1}, ..., xn

reduce_vars := proc(L, Lv)
	    local LC;

	    local i, d;
	    
	    LC := [];
	    for i from 1 to nops(Lv) do:
	    	LC := [op(LC), coeff(L, Lv[i])];
	    end do;

	    d := add(LC[i]*Lv[i], i=1..nops(Lv));

	    LC := [op(LC), -(L - d)];
end proc; 